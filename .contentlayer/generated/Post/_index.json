[
  {
    "title": "A gentle guide to pagination in GraphQL",
    "description": "Pagination is a common requirement in web applications. In this post, we will learn how to implement pagination in GraphQL.",
    "tags": [
      "React",
      "Typescript",
      "Tutorial"
    ],
    "ogImage": "/assets/blog/dynamic-routing/cover.jpg",
    "thumbnail": "/assets/blog/dynamic-routing/cover.jpg",
    "postId": "dynamic-routing",
    "body": {
      "raw": "\nDnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\n\n## Main Heading 01\n\nFor the purposes of the DnD kit, we can place drag-and-drop interaction into two broad categories:\n\n- **Default** - In this category, we have distinct components which are either draggable or droppable's into which draggable components can be dragged and dropped over.\n- **Sortables** - In this category components are both draggable and dropable, and they rearrange or sort as a single component is dragged.\n\nIt is important to note that these categories are not mutually exclusive. We can build drag-and-drop interactions which combine elements of both categories, this is usually the case in more advanced drag-and-drop interfaces.\n\n//https://www.pdftron.com/blog/graphql/implementing-graphql-pagination/\n\nDnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\n\n### SubHeading 01\n\nFor the purposes of the DnD kit, we can place drag-and-drop interaction into two broad categories:\n\n- **Default** - In this category, we have distinct components which are either draggable or droppable's into which draggable components can be dragged and dropped over.\n- **Sortables** - In this category components are both draggable and dropable, and they rearrange or sort as a single component is dragged.\n\nIt is important to note that these categories are not mutually exclusive. We can build drag-and-drop interactions which combine elements of both categories, this is usually the case in more advanced drag-and-drop interfaces.\n\nDnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\n\n## Main Heading 02\n\nFor the purposes of the DnD kit, we can place drag-and-drop interaction into two broad categories:\n\n- **Default** - In this category, we have distinct components which are either draggable or droppable's into which draggable components can be dragged and dropped over.\n- **Sortables** - In this category components are both draggable and dropable, and they rearrange or sort as a single component is dragged.\n\nIt is important to note that these categories are not mutually exclusive. We can build drag-and-drop interactions which combine elements of both categories, this is usually the case in more advanced drag-and-drop interfaces.\n\n//https://www.pdftron.com/blog/graphql/implementing-graphql-pagination/\n\nDnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\n\n### SubHeading 02\n\nFor the purposes of the DnD kit, we can place drag-and-drop interaction into two broad categories:\n\n- **Default** - In this category, we have distinct components which are either draggable or droppable's into which draggable components can be dragged and dropped over.\n- **Sortables** - In this category components are both draggable and dropable, and they rearrange or sort as a single component is dragged.\n\nIt is important to note that these categories are not mutually exclusive. We can build drag-and-drop interactions which combine elements of both categories, this is usually the case in more advanced drag-and-drop interfaces.\n\nDnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\n\nGo back [Home](/).\n",
      "code": "var Component=(()=>{var c=Object.create;var r=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var u=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),w=(a,e)=>{for(var t in e)r(a,t,{get:e[t],enumerable:!0})},l=(a,e,t,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!b.call(a,i)&&i!==t&&r(a,i,{get:()=>e[i],enumerable:!(o=g(e,i))||o.enumerable});return a};var f=(a,e,t)=>(t=a!=null?c(m(a)):{},l(e||!a||!a.__esModule?r(t,\"default\",{value:a,enumerable:!0}):t,a)),y=a=>l(r({},\"__esModule\",{value:!0}),a);var d=u((k,s)=>{s.exports=_jsx_runtime});var x={};w(x,{default:()=>I,frontmatter:()=>D});var n=f(d()),D={title:\"A gentle guide to pagination in GraphQL\",publishedAt:\"2021-12-18\",description:\"Pagination is a common requirement in web applications. In this post, we will learn how to implement pagination in GraphQL.\",tags:[\"React\",\"Typescript\",\"Tutorial\"],ogImage:\"/assets/blog/dynamic-routing/cover.jpg\",thumbnail:\"/assets/blog/dynamic-routing/cover.jpg\",postId:\"dynamic-routing\"};function h(a){let e=Object.assign({p:\"p\",h2:\"h2\",a:\"a\",span:\"span\",ul:\"ul\",li:\"li\",strong:\"strong\",h3:\"h3\"},a.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"DnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"main-heading-01\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#main-heading-01\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Main Heading 01\"]}),`\n`,(0,n.jsx)(e.p,{children:\"For the purposes of the DnD kit, we can place drag-and-drop interaction into two broad categories:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Default\"}),\" - In this category, we have distinct components which are either draggable or droppable's into which draggable components can be dragged and dropped over.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Sortables\"}),\" - In this category components are both draggable and dropable, and they rearrange or sort as a single component is dragged.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"It is important to note that these categories are not mutually exclusive. We can build drag-and-drop interactions which combine elements of both categories, this is usually the case in more advanced drag-and-drop interfaces.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"//\",(0,n.jsx)(e.a,{href:\"https://www.pdftron.com/blog/graphql/implementing-graphql-pagination/\",children:\"https://www.pdftron.com/blog/graphql/implementing-graphql-pagination/\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"DnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"subheading-01\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#subheading-01\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"SubHeading 01\"]}),`\n`,(0,n.jsx)(e.p,{children:\"For the purposes of the DnD kit, we can place drag-and-drop interaction into two broad categories:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Default\"}),\" - In this category, we have distinct components which are either draggable or droppable's into which draggable components can be dragged and dropped over.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Sortables\"}),\" - In this category components are both draggable and dropable, and they rearrange or sort as a single component is dragged.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"It is important to note that these categories are not mutually exclusive. We can build drag-and-drop interactions which combine elements of both categories, this is usually the case in more advanced drag-and-drop interfaces.\"}),`\n`,(0,n.jsx)(e.p,{children:\"DnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"main-heading-02\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#main-heading-02\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Main Heading 02\"]}),`\n`,(0,n.jsx)(e.p,{children:\"For the purposes of the DnD kit, we can place drag-and-drop interaction into two broad categories:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Default\"}),\" - In this category, we have distinct components which are either draggable or droppable's into which draggable components can be dragged and dropped over.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Sortables\"}),\" - In this category components are both draggable and dropable, and they rearrange or sort as a single component is dragged.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"It is important to note that these categories are not mutually exclusive. We can build drag-and-drop interactions which combine elements of both categories, this is usually the case in more advanced drag-and-drop interfaces.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"//\",(0,n.jsx)(e.a,{href:\"https://www.pdftron.com/blog/graphql/implementing-graphql-pagination/\",children:\"https://www.pdftron.com/blog/graphql/implementing-graphql-pagination/\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"DnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"subheading-02\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#subheading-02\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"SubHeading 02\"]}),`\n`,(0,n.jsx)(e.p,{children:\"For the purposes of the DnD kit, we can place drag-and-drop interaction into two broad categories:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Default\"}),\" - In this category, we have distinct components which are either draggable or droppable's into which draggable components can be dragged and dropped over.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Sortables\"}),\" - In this category components are both draggable and dropable, and they rearrange or sort as a single component is dragged.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"It is important to note that these categories are not mutually exclusive. We can build drag-and-drop interactions which combine elements of both categories, this is usually the case in more advanced drag-and-drop interfaces.\"}),`\n`,(0,n.jsx)(e.p,{children:\"DnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Go back \",(0,n.jsx)(e.a,{href:\"/\",children:\"Home\"}),\".\"]})]})}function v(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,Object.assign({},a,{children:(0,n.jsx)(h,a)})):h(a)}var I=v;return y(x);})();\n;return Component;"
    },
    "_id": "a-gentle-guide-to-pagination-in-graphql.mdx",
    "_raw": {
      "sourceFilePath": "a-gentle-guide-to-pagination-in-graphql.mdx",
      "sourceFileName": "a-gentle-guide-to-pagination-in-graphql.mdx",
      "sourceFileDir": ".",
      "contentType": "mdx",
      "flattenedPath": "a-gentle-guide-to-pagination-in-graphql"
    },
    "type": "Post",
    "publishedAt": "2022-12-27T10:40:09.624Z",
    "lastUpdatedAt": "2022-12-27T10:40:09.624Z",
    "readingTime": {
      "text": "4 min read",
      "minutes": 3.73,
      "time": 223800,
      "words": 746
    },
    "headings": [
      {
        "id": "main-heading-01",
        "content": "Main Heading 01",
        "link": "#main-heading-01",
        "level": 2
      },
      {
        "id": "subheading-01",
        "content": "SubHeading 01",
        "link": "#subheading-01",
        "level": 3
      },
      {
        "id": "main-heading-02",
        "content": "Main Heading 02",
        "link": "#main-heading-02",
        "level": 2
      },
      {
        "id": "subheading-02",
        "content": "SubHeading 02",
        "link": "#subheading-02",
        "level": 3
      }
    ],
    "slug": "a-gentle-guide-to-pagination-in-graphql"
  },
  {
    "title": "Building component libraries in React with Tailwind & Radix UI",
    "description": "How we built the Super Component Library",
    "tags": [
      "React",
      "Typescript",
      "Tutorial"
    ],
    "ogImage": "/assets/blog/dynamic-routing/cover.jpg",
    "thumbnail": "/assets/blog/dynamic-routing/cover.jpg",
    "postId": "comp-library",
    "body": {
      "raw": "\nDnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\n\n<Image\n  alt={`Bridge`}\n  src={`/images/bridge.jpg`}\n  width={1440}\n  height={960}\n  priority\n/>\n\n## Heading H2\n\nThis is an example blog post with React components. This page is using the `Image` component from Next.js.\n\n```jsx:example-post.mdx\n<Image\n  alt={`Bridge`}\n  src={`/images/bridge.jpg`}\n  width={1440}\n  height={960}\n  priority\n/>\n```\n\n### Code Blocks\n\nThis starter also comes with fancy code blocks with code titles.\n\n```jsx:example.jsx\nimport React, { useState } from 'react';\n\nfunction Example() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\n- First, we need a way to target the specific element we want to drag and keep track of it as we drag. We can do this by passing the setNodeRef function returned by useDraggable to the ref of the DOM element we want to drag:\n\n  ```jsx\n  const { setNodeRef } = useDraggable({\n    id: \"draggable-1\",\n  });\n\n  return <div ref={setNodeRef}>Draggable</div>;\n  ```\n\n- Next, we need to keep track of the position of the draggable element as we drag it. We can do this by passing the attributes returned by useDraggable to the draggable element:\n\n  ```jsx\n  const { attributes, listeners, setNodeRef, transform } = useDraggable({\n    id: \"draggable-1\",\n  });\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={{\n        transform: transform\n          ? `translate3d(${transform.x}px, ${transform.y}px, 0)`\n          : undefined,\n      }}\n      {...attributes}\n      {...listeners}\n    >\n      Draggable\n    </div>\n  );\n  ```\n\n- Finally, we need to make sure that the draggable element is rendered in the correct position as we drag it. We can do this by passing the transform returned by useDraggable to the draggable element's style:\n\n  ```jsx\n  const { attributes, listeners, setNodeRef, transform } = useDraggable({\n    id: \"draggable-1\",\n  });\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={{\n        transform: transform\n          ? `translate3d(${transform.x}px, ${transform.y}px, 0)`\n          : undefined,\n      }}\n      {...attributes}\n      {...listeners}\n    >\n      Draggable\n    </div>\n  );\n  ```\n\nGo back [Home](/).\n",
      "code": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var B=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var b=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),g=(n,e)=>{for(var s in e)r(n,s,{get:e[s],enumerable:!0})},o=(n,e,s,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of B(e))!m.call(n,a)&&a!==s&&r(n,a,{get:()=>e[a],enumerable:!(c=p(e,a))||c.enumerable});return n};var C=(n,e,s)=>(s=n!=null?h(y(n)):{},o(e||!n||!n.__esModule?r(s,\"default\",{value:n,enumerable:!0}):s,n)),D=n=>o(r({},\"__esModule\",{value:!0}),n);var t=b((x,i)=>{i.exports=_jsx_runtime});var N={};g(N,{default:()=>F,frontmatter:()=>f});var l=C(t()),f={title:\"Building component libraries in React with Tailwind & Radix UI\",publishedAt:\"2021-12-18\",description:\"How we built the Super Component Library\",tags:[\"React\",\"Typescript\",\"Tutorial\"],ogImage:\"/assets/blog/dynamic-routing/cover.jpg\",thumbnail:\"/assets/blog/dynamic-routing/cover.jpg\",postId:\"comp-library\"};function d(n){let e=Object.assign({p:\"p\",h2:\"h2\",a:\"a\",span:\"span\",code:\"code\",div:\"div\",pre:\"pre\",h3:\"h3\",ul:\"ul\",li:\"li\"},n.components),{Image:s}=e;return s||u(\"Image\",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.p,{children:\"DnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\"}),`\n`,(0,l.jsx)(s,{alt:\"Bridge\",src:\"/images/bridge.jpg\",width:1440,height:960,priority:!0}),`\n`,(0,l.jsxs)(e.h2,{id:\"heading-h2\",children:[(0,l.jsx)(e.a,{className:\"anchor\",href:\"#heading-h2\",children:(0,l.jsx)(e.span,{className:\"icon icon-link\"})}),\"Heading H2\"]}),`\n`,(0,l.jsxs)(e.p,{children:[\"This is an example blog post with React components. This page is using the \",(0,l.jsx)(e.code,{children:\"Image\"}),\" component from Next.js.\"]}),`\n`,(0,l.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,l.jsx)(e.pre,{\"data-language\":\"jsx:example-post.mdx\",\"data-theme\":\"default\",children:(0,l.jsxs)(e.code,{\"data-language\":\"jsx:example-post.mdx\",\"data-theme\":\"default\",children:[(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"<Image\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"  alt={`Bridge`}\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"  src={`/images/bridge.jpg`}\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"  width={1440}\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"  height={960}\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"  priority\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"/>\"})})]})})}),`\n`,(0,l.jsxs)(e.h3,{id:\"code-blocks\",children:[(0,l.jsx)(e.a,{className:\"anchor\",href:\"#code-blocks\",children:(0,l.jsx)(e.span,{className:\"icon icon-link\"})}),\"Code Blocks\"]}),`\n`,(0,l.jsx)(e.p,{children:\"This starter also comes with fancy code blocks with code titles.\"}),`\n`,(0,l.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,l.jsx)(e.pre,{\"data-language\":\"jsx:example.jsx\",\"data-theme\":\"default\",children:(0,l.jsxs)(e.code,{\"data-language\":\"jsx:example.jsx\",\"data-theme\":\"default\",children:[(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"import React, { useState } from 'react';\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"}})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"function Example() {\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:`  // Declare a new state variable, which we'll call \"count\"`})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"  const [count, setCount] = useState(0);\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"}})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"  return (\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"    <div>\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"      <p>You clicked {count} times</p>\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"      <button onClick={() => setCount(count + 1)}>\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"        Click me\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"      </button>\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"    </div>\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"  );\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#abb2bf\"},children:\"}\"})})]})})}),`\n`,(0,l.jsxs)(e.ul,{children:[`\n`,(0,l.jsxs)(e.li,{children:[`\n`,(0,l.jsx)(e.p,{children:\"First, we need a way to target the specific element we want to drag and keep track of it as we drag. We can do this by passing the setNodeRef function returned by useDraggable to the ref of the DOM element we want to drag:\"}),`\n`,(0,l.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,l.jsx)(e.pre,{\"data-language\":\"jsx\",\"data-theme\":\"default\",children:(0,l.jsxs)(e.code,{\"data-language\":\"jsx\",\"data-theme\":\"default\",children:[(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"const\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" { \"}),(0,l.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"setNodeRef\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" } \"}),(0,l.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"useDraggable\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"({\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  \"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"id\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": \"}),(0,l.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"draggable-1\"'}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\",\"})]}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"});\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\"}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"return\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" <\"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"div\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#D19A66\",fontStyle:\"italic\"},children:\"ref\"}),(0,l.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"{\"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"setNodeRef\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\">Draggable</\"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"div\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\">;\"})]})]})})}),`\n`]}),`\n`,(0,l.jsxs)(e.li,{children:[`\n`,(0,l.jsx)(e.p,{children:\"Next, we need to keep track of the position of the draggable element as we drag it. We can do this by passing the attributes returned by useDraggable to the draggable element:\"}),`\n`,(0,l.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,l.jsx)(e.pre,{\"data-language\":\"jsx\",\"data-theme\":\"default\",children:(0,l.jsxs)(e.code,{\"data-language\":\"jsx\",\"data-theme\":\"default\",children:[(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"const\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" { \"}),(0,l.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"attributes\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", \"}),(0,l.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"listeners\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", \"}),(0,l.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"setNodeRef\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", \"}),(0,l.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"transform\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" } \"}),(0,l.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"useDraggable\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"({\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  \"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"id\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": \"}),(0,l.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"draggable-1\"'}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\",\"})]}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"});\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\"}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"return\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" (\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  <\"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"div\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,l.jsx)(e.span,{style:{color:\"#D19A66\",fontStyle:\"italic\"},children:\"ref\"}),(0,l.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"{\"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"setNodeRef\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,l.jsx)(e.span,{style:{color:\"#D19A66\",fontStyle:\"italic\"},children:\"style\"}),(0,l.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"{\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"{\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"      \"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"transform\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": \"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"transform\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"        \"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"?\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#98C379\"},children:\"`translate3d(\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"${\"}),(0,l.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"transform\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\".\"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"x\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"}),(0,l.jsx)(e.span,{style:{color:\"#98C379\"},children:\"px, \"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"${\"}),(0,l.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"transform\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\".\"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"y\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"}),(0,l.jsx)(e.span,{style:{color:\"#98C379\"},children:\"px, 0)`\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"        \"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\":\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"undefined\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\",\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    }\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"{\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"...\"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"attributes\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"{\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"...\"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"listeners\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"})]}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  >\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    Draggable\"})}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  </\"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"div\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\">\"})]}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\");\"})})]})})}),`\n`]}),`\n`,(0,l.jsxs)(e.li,{children:[`\n`,(0,l.jsx)(e.p,{children:\"Finally, we need to make sure that the draggable element is rendered in the correct position as we drag it. We can do this by passing the transform returned by useDraggable to the draggable element's style:\"}),`\n`,(0,l.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,l.jsx)(e.pre,{\"data-language\":\"jsx\",\"data-theme\":\"default\",children:(0,l.jsxs)(e.code,{\"data-language\":\"jsx\",\"data-theme\":\"default\",children:[(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"const\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" { \"}),(0,l.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"attributes\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", \"}),(0,l.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"listeners\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", \"}),(0,l.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"setNodeRef\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", \"}),(0,l.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"transform\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" } \"}),(0,l.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"useDraggable\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"({\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  \"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"id\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": \"}),(0,l.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"draggable-1\"'}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\",\"})]}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"});\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\"}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"return\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" (\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  <\"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"div\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,l.jsx)(e.span,{style:{color:\"#D19A66\",fontStyle:\"italic\"},children:\"ref\"}),(0,l.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"{\"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"setNodeRef\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,l.jsx)(e.span,{style:{color:\"#D19A66\",fontStyle:\"italic\"},children:\"style\"}),(0,l.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"{\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"{\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"      \"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"transform\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": \"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"transform\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"        \"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"?\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#98C379\"},children:\"`translate3d(\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"${\"}),(0,l.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"transform\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\".\"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"x\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"}),(0,l.jsx)(e.span,{style:{color:\"#98C379\"},children:\"px, \"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"${\"}),(0,l.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"transform\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\".\"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"y\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"}),(0,l.jsx)(e.span,{style:{color:\"#98C379\"},children:\"px, 0)`\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"        \"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\":\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,l.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"undefined\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\",\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    }\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"{\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"...\"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"attributes\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"{\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"...\"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"listeners\"}),(0,l.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"})]}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  >\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    Draggable\"})}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  </\"}),(0,l.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"div\"}),(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\">\"})]}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\");\"})})]})})}),`\n`]}),`\n`]}),`\n`,(0,l.jsxs)(e.p,{children:[\"Go back \",(0,l.jsx)(e.a,{href:\"/\",children:\"Home\"}),\".\"]})]})}function A(n={}){let{wrapper:e}=n.components||{};return e?(0,l.jsx)(e,Object.assign({},n,{children:(0,l.jsx)(d,n)})):d(n)}var F=A;function u(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return D(N);})();\n;return Component;"
    },
    "_id": "building-component-libraries-in-react-with-tailwindcss-and-radix-ui.mdx",
    "_raw": {
      "sourceFilePath": "building-component-libraries-in-react-with-tailwindcss-and-radix-ui.mdx",
      "sourceFileName": "building-component-libraries-in-react-with-tailwindcss-and-radix-ui.mdx",
      "sourceFileDir": ".",
      "contentType": "mdx",
      "flattenedPath": "building-component-libraries-in-react-with-tailwindcss-and-radix-ui"
    },
    "type": "Post",
    "publishedAt": "2022-12-27T10:40:18.243Z",
    "lastUpdatedAt": "2022-12-27T10:40:18.243Z",
    "readingTime": {
      "text": "2 min read",
      "minutes": 1.825,
      "time": 109500,
      "words": 365
    },
    "headings": [
      {
        "id": "heading-h2",
        "content": "Heading H2",
        "link": "#heading-h2",
        "level": 2
      },
      {
        "id": "code-blocks",
        "content": "Code Blocks",
        "link": "#code-blocks",
        "level": 3
      }
    ],
    "slug": "building-component-libraries-in-react-with-tailwindcss-and-radix-ui"
  },
  {
    "title": "Drag & drop in React with Dnd Kit",
    "description": "A simple guide to get started with Dnd Kit in React.",
    "tags": [
      "React",
      "Typescript",
      "Tutorial"
    ],
    "ogImage": "/assets/blog/dynamic-routing/cover.jpg",
    "thumbnail": "/assets/blog/dynamic-routing/cover.jpg",
    "postId": "drag-and-drop-in-react-with-dnd-kit",
    "body": {
      "raw": "\nDnD Kit is an awesome library I recently discovered while working on the new dashboard at Super. It makes the complex task of creating performant Drag-and-Drop UI interactions easier, with some interesting patterns and concepts. I spent some time creating a lot of cool interactions with the library and wanted to share some of the things I learned.\n\nLets get started\n\n## Core Concepts\n\nIn most Drag-and-drop UI interactions, there are usually two types of components involved:\n\n- **Draggable components** which are elements on a page that we can pick up, drag and drop in designated drop areas; and\n- **Droppable components**, which are elements that act as the 'designated drop areas' that draggable elements can be dropped over.\n\nYou can see these components in action by playing around in the demo below:\n\n<DraggableAndDroppable />\n\nDndKit embraces this concept, providing two essential hooks for applications: useDraggable and useDroppable. The former makes a component draggable, while the latter makes it droppable. These hooks are exported from the `@dnd-kit/core` package; install it by running the following command:\n\n```bash\nnpm install @dnd-kit/core\n```\n\nTo manage interactions between draggable and droppable components, `@dnd-kit/core` also exports a `<DndContext>` component. This component uses the React Context API to share data between draggable and droppable components, so we need to wrap them with it:\n\n```tsx showLineNumbers {2}\nimport React from \"react\";\nimport { DndContext } from \"@dnd-kit/core\";\nimport { Draggable } from \"./Draggable\";\nimport { Droppable } from \"./Droppable\";\n\nfunction App() {\n  return (\n    <DndContext>\n      <Draggable />\n      <Droppable />\n    </DndContext>\n  );\n}\n```\n\n> 👍 Success\n>\n> The Context API is a great way to share data between components without having to pass props down the component tree. It's also a great way to avoid prop drilling. If you're not familiar with the Context API, I recommend reading [this article](https://kentcdodds.com/blog/how-to-use-react-context-effectively) by Kent C. Dodds.\n\n### Draggables\n\nThe `useDraggable` hook is used to make components draggable. It takes an input object as an argument, which must include a unique `id`. It returns an object with several properties, of which we are currently interested in:\n\n1. `setNodeRef` - a ref we attach to the HTML element we want to make draggable. This is the essential part of how we provide dndkit with the element that needs to be dragged.\n2. `listeners` and `attributes` - objects we can spread on the HTML element to listen for a drag event.\n3. `transform` - an object with the x- and y-coordinates of a draggable element in 2D. We'll use this to update the `translate` property, allowing us to move the draggable component on the screen.\n\nHere's an example of how all these elements come together:\n\n```tsx showLineNumbers\nfunction Draggable(props: DraggableProps) {\n  const { attributes, listeners, setNodeRef, transform } = useDraggable({\n    id: props.id,\n  });\n\n  return (\n    <button\n      ref={setNodeRef}\n      style={{\n        transform: CSS.Transform.toString(transform),\n      }}\n      {...listeners}\n      {...attributes}\n    >\n      Draggable\n    </button>\n  );\n}\n```\n\n> 💡 Tip\n> setNodeRef is a callback ref - you can find out more of how they work here\n\n### Droppables\n\nThe `useDroppable` hook is used to make components Droppable. Similar to `useDraggable`, it takes an input object as an argument, with a required unique `id`. It returns an object with several properties, of which we are currently interested in.\n\n1. `setNodeRef` - a ref we attach to the HTML element we want to make droppable. This is how we tell dndkit that an element is a drop area.\n2. `isOver` - a Boolean that is `true` if a droppable component is over the droppable component.\n\nHere is how of how all these elements come together:\n\n```tsx showLineNumbers\nfunction Droppable(props: DroppableProps) {\n  const { setNodeRef, isOver } = useDroppable({\n    id: props.id,\n  });\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={{\n        backgroundColor: isOver ? \"lightblue\" : \"white\",\n      }}\n    >\n      Droppable\n    </div>\n  );\n}\n```\n\n## Examples\n\nNow that we've discussed the core concepts of the dndkit, let's go through examples of how to use them to create beautiful drag-and-drop interactions. We'll cover four common use cases found on the web:\n\n1. **Free Drag-and-Drop**: Drag and drop an element across the entire screen, like in canvas-based applications like Figma and Excalidraw.\n2. **Classic Drag-and-Drop**: Drag and drop items into one or more droppable areas.\n3. **Single Container Sortables**: Drag list items to change their order within a single container.\n4. **Multi Container Sortables**: Drag items between multiple containers, sort them, and sort the containers.\n5. **Sortables** which are usually lists where each list item is both draggable and droppable. And rearrange or sort as a single component is dragged.\n\n### Free Drag-and-Drop\n\n<DraggableAndDroppable />\n\nTo build, we need to store the draggable component's data, including its x- and y-positions, in state. We'll leverage the `onDragEnd` event emitted by the **`<DndContext />`**. This function fires after a draggable item is dropped, and the event object passed to it contains data about the component. We can use this data to update the component's position in state.\n\nYou can see how this is done with the interactive demo below:\n\n### Classic Drag-and-Drop\n\n<DraggableAndDroppable />\n\nTo build this we’ll need both draggable and droppable components. We need an array of IDs of our droppable containers and a piece of state to track which droppable component our draggable component is over. We'll use the onDragEnd function to check if a draggable component is over a particular droppable component. If it is, we'll update the state and add the draggable component as a child of the droppable container in the UI.\n\nYou can see how this is done with the interactive demo below:\n\nDnD Kit is an awesome library I recently discovered while working on the new dashboard at Super. It makes the complex task of creating performant Drag-and-Drop UI interactions easier, with some interesting patterns and concepts. I spent some time creating a lot of cool interactions with the library and wanted to share some of the things I learned.\n\nDnD Kit is an awesome library I recently discovered while working on the new dashboard at Super. It makes the complex task of creating performant Drag-and-Drop UI interactions easier, with some interesting patterns and concepts. I spent some time creating a lot of cool interactions with the library and wanted to share some of the things I learned.\n\n### Single Container Sortables\n\n<DraggableAndDroppable />\n\nTo build this we’ll need both draggable and droppable components. We need an array of IDs of our droppable containers and a piece of state to track which droppable component our draggable component is over. We'll use the onDragEnd function to check if a draggable component is over a particular droppable component. If it is, we'll update the state and add the draggable component as a child of the droppable container in the UI.\n\nYou can see how this is done with the interactive demo below:\n\nDnD Kit is an awesome library I recently discovered while working on the new dashboard at Super. It makes the complex task of creating performant Drag-and-Drop UI interactions easier, with some interesting patterns and concepts. I spent some time creating a lot of cool interactions with the library and wanted to share some of the things I learned.\n\nDnD Kit is an awesome library I recently discovered while working on the new dashboard at Super. It makes the complex task of creating performant Drag-and-Drop UI interactions easier, with some interesting patterns and concepts. I spent some time creating a lot of cool interactions with the library and wanted to share some of the things I learned.\n\n### Multi Container Sortables\n\n<DraggableAndDroppable />\n\nTo build this we’ll need both draggable and droppable components. We need an array of IDs of our droppable containers and a piece of state to track which droppable component our draggable component is over. We'll use the onDragEnd function to check if a draggable component is over a particular droppable component. If it is, we'll update the state and add the draggable component as a child of the droppable container in the UI.\n\nYou can see how this is done with the interactive demo below:\n\nDnD Kit is an awesome library I recently discovered while working on the new dashboard at Super. It makes the complex task of creating performant Drag-and-Drop UI interactions easier, with some interesting patterns and concepts. I spent some time creating a lot of cool interactions with the library and wanted to share some of the things I learned.\n\nDnD Kit is an awesome library I recently discovered while working on the new dashboard at Super. It makes the complex task of creating performant Drag-and-Drop UI interactions easier, with some interesting patterns and concepts. I spent some time creating a lot of cool interactions with the library and wanted to share some of the things I learned.\n",
      "code": "var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var B=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var g=(l,e)=>()=>(e||l((e={exports:{}}).exports,e),e.exports),b=(l,e)=>{for(var r in e)o(l,r,{get:e[r],enumerable:!0})},t=(l,e,r,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of B(e))!y.call(l,a)&&a!==r&&o(l,a,{get:()=>e[a],enumerable:!(s=p(e,a))||s.enumerable});return l};var D=(l,e,r)=>(r=l!=null?h(m(l)):{},t(e||!l||!l.__esModule?o(r,\"default\",{value:l,enumerable:!0}):r,l)),u=l=>t(o({},\"__esModule\",{value:!0}),l);var i=g((k,c)=>{c.exports=_jsx_runtime});var C={};b(C,{default:()=>A,frontmatter:()=>f});var n=D(i()),f={title:\"Drag & drop in React with Dnd Kit\",publishedAt:\"2022-12-18\",description:\"A simple guide to get started with Dnd Kit in React.\",tags:[\"React\",\"Typescript\",\"Tutorial\"],ogImage:\"/assets/blog/dynamic-routing/cover.jpg\",thumbnail:\"/assets/blog/dynamic-routing/cover.jpg\",postId:\"drag-and-drop-in-react-with-dnd-kit\"};function d(l){let e=Object.assign({p:\"p\",h2:\"h2\",a:\"a\",span:\"span\",ul:\"ul\",li:\"li\",strong:\"strong\",code:\"code\",div:\"div\",pre:\"pre\",blockquote:\"blockquote\",h3:\"h3\",ol:\"ol\"},l.components),{DraggableAndDroppable:r}=e;return r||F(\"DraggableAndDroppable\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"DnD Kit is an awesome library I recently discovered while working on the new dashboard at Super. It makes the complex task of creating performant Drag-and-Drop UI interactions easier, with some interesting patterns and concepts. I spent some time creating a lot of cool interactions with the library and wanted to share some of the things I learned.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Lets get started\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"core-concepts\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#core-concepts\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Core Concepts\"]}),`\n`,(0,n.jsx)(e.p,{children:\"In most Drag-and-drop UI interactions, there are usually two types of components involved:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Draggable components\"}),\" which are elements on a page that we can pick up, drag and drop in designated drop areas; and\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Droppable components\"}),\", which are elements that act as the 'designated drop areas' that draggable elements can be dropped over.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"You can see these components in action by playing around in the demo below:\"}),`\n`,(0,n.jsx)(r,{}),`\n`,(0,n.jsxs)(e.p,{children:[\"DndKit embraces this concept, providing two essential hooks for applications: useDraggable and useDroppable. The former makes a component draggable, while the latter makes it droppable. These hooks are exported from the \",(0,n.jsx)(e.code,{children:\"@dnd-kit/core\"}),\" package; install it by running the following command:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"bash\",\"data-theme\":\"default\",children:(0,n.jsx)(e.code,{\"data-language\":\"bash\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"npm \"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:\"install\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:\"@dnd-kit/core\"})]})})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"To manage interactions between draggable and droppable components, \",(0,n.jsx)(e.code,{children:\"@dnd-kit/core\"}),\" also exports a \",(0,n.jsx)(e.code,{children:\"<DndContext>\"}),\" component. This component uses the React Context API to share data between draggable and droppable components, so we need to wrap them with it:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"tsx\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-line-numbers\":\"\",\"data-language\":\"tsx\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"import\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"React\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"from\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"react\"'}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\";\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line line--highlighted\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"import\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" { \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"DndContext\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" } \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"from\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"@dnd-kit/core\"'}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\";\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"import\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" { \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"Draggable\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" } \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"from\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"./Draggable\"'}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\";\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"import\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" { \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"Droppable\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" } \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"from\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"./Droppable\"'}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\";\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\"}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"function\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"App\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"() {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"return\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" (\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    <\"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"DndContext\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\">\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"      <\"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"Draggable\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" />\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"      <\"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"Droppable\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" />\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    </\"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"DndContext\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\">\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  );\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})})]})})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"\\u{1F44D} Success\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The Context API is a great way to share data between components without having to pass props down the component tree. It's also a great way to avoid prop drilling. If you're not familiar with the Context API, I recommend reading \",(0,n.jsx)(e.a,{href:\"https://kentcdodds.com/blog/how-to-use-react-context-effectively\",children:\"this article\"}),\" by Kent C. Dodds.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.h3,{id:\"draggables\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#draggables\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Draggables\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useDraggable\"}),\" hook is used to make components draggable. It takes an input object as an argument, which must include a unique \",(0,n.jsx)(e.code,{children:\"id\"}),\". It returns an object with several properties, of which we are currently interested in:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"setNodeRef\"}),\" - a ref we attach to the HTML element we want to make draggable. This is the essential part of how we provide dndkit with the element that needs to be dragged.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"listeners\"}),\" and \",(0,n.jsx)(e.code,{children:\"attributes\"}),\" - objects we can spread on the HTML element to listen for a drag event.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"transform\"}),\" - an object with the x- and y-coordinates of a draggable element in 2D. We'll use this to update the \",(0,n.jsx)(e.code,{children:\"translate\"}),\" property, allowing us to move the draggable component on the screen.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Here's an example of how all these elements come together:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"tsx\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-line-numbers\":\"\",\"data-language\":\"tsx\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"function\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"Draggable\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\",fontStyle:\"italic\"},children:\"props\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"DraggableProps\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\") {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"const\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" { \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"attributes\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"listeners\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"setNodeRef\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"transform\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" } \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"useDraggable\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"({\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"id\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"props\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\".\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"id\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\",\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  });\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\"}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"return\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" (\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    <\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"button\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"      \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\",fontStyle:\"italic\"},children:\"ref\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"{\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"setNodeRef\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"      \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\",fontStyle:\"italic\"},children:\"style\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"{\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"{\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"        \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"transform\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"CSS\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\".\"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"Transform\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\".\"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"toString\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"transform\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"),\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"      }\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"      \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"{\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"...\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"listeners\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"      \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"{\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"...\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"attributes\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    >\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"      Draggable\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    </\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"button\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\">\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  );\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})})]})})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:`\\u{1F4A1} Tip\nsetNodeRef is a callback ref - you can find out more of how they work here`}),`\n`]}),`\n`,(0,n.jsxs)(e.h3,{id:\"droppables\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#droppables\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Droppables\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"useDroppable\"}),\" hook is used to make components Droppable. Similar to \",(0,n.jsx)(e.code,{children:\"useDraggable\"}),\", it takes an input object as an argument, with a required unique \",(0,n.jsx)(e.code,{children:\"id\"}),\". It returns an object with several properties, of which we are currently interested in.\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"setNodeRef\"}),\" - a ref we attach to the HTML element we want to make droppable. This is how we tell dndkit that an element is a drop area.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"isOver\"}),\" - a Boolean that is \",(0,n.jsx)(e.code,{children:\"true\"}),\" if a droppable component is over the droppable component.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Here is how of how all these elements come together:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"tsx\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-line-numbers\":\"\",\"data-language\":\"tsx\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"function\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"Droppable\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\",fontStyle:\"italic\"},children:\"props\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"DroppableProps\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\") {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"const\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" { \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"setNodeRef\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"isOver\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" } \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"useDroppable\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"({\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"id\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"props\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\".\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"id\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\",\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  });\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\"}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"return\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" (\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    <\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"div\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"      \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\",fontStyle:\"italic\"},children:\"ref\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"{\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"setNodeRef\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"      \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\",fontStyle:\"italic\"},children:\"style\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"{\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"{\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"        \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"backgroundColor\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\": \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"isOver\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"?\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"lightblue\"'}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\":\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"white\"'}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\",\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"      }\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"}\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    >\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"      Droppable\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    </\"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"div\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\">\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  );\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})})]})})}),`\n`,(0,n.jsxs)(e.h2,{id:\"examples\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#examples\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Examples\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Now that we've discussed the core concepts of the dndkit, let's go through examples of how to use them to create beautiful drag-and-drop interactions. We'll cover four common use cases found on the web:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Free Drag-and-Drop\"}),\": Drag and drop an element across the entire screen, like in canvas-based applications like Figma and Excalidraw.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Classic Drag-and-Drop\"}),\": Drag and drop items into one or more droppable areas.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Single Container Sortables\"}),\": Drag list items to change their order within a single container.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Multi Container Sortables\"}),\": Drag items between multiple containers, sort them, and sort the containers.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Sortables\"}),\" which are usually lists where each list item is both draggable and droppable. And rearrange or sort as a single component is dragged.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.h3,{id:\"free-drag-and-drop\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#free-drag-and-drop\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Free Drag-and-Drop\"]}),`\n`,(0,n.jsx)(r,{}),`\n`,(0,n.jsxs)(e.p,{children:[\"To build, we need to store the draggable component's data, including its x- and y-positions, in state. We'll leverage the \",(0,n.jsx)(e.code,{children:\"onDragEnd\"}),\" event emitted by the \",(0,n.jsx)(e.strong,{children:(0,n.jsx)(e.code,{children:\"<DndContext />\"})}),\". This function fires after a draggable item is dropped, and the event object passed to it contains data about the component. We can use this data to update the component's position in state.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"You can see how this is done with the interactive demo below:\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"classic-drag-and-drop\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#classic-drag-and-drop\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Classic Drag-and-Drop\"]}),`\n`,(0,n.jsx)(r,{}),`\n`,(0,n.jsx)(e.p,{children:\"To build this we\\u2019ll need both draggable and droppable components. We need an array of IDs of our droppable containers and a piece of state to track which droppable component our draggable component is over. We'll use the onDragEnd function to check if a draggable component is over a particular droppable component. If it is, we'll update the state and add the draggable component as a child of the droppable container in the UI.\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can see how this is done with the interactive demo below:\"}),`\n`,(0,n.jsx)(e.p,{children:\"DnD Kit is an awesome library I recently discovered while working on the new dashboard at Super. It makes the complex task of creating performant Drag-and-Drop UI interactions easier, with some interesting patterns and concepts. I spent some time creating a lot of cool interactions with the library and wanted to share some of the things I learned.\"}),`\n`,(0,n.jsx)(e.p,{children:\"DnD Kit is an awesome library I recently discovered while working on the new dashboard at Super. It makes the complex task of creating performant Drag-and-Drop UI interactions easier, with some interesting patterns and concepts. I spent some time creating a lot of cool interactions with the library and wanted to share some of the things I learned.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"single-container-sortables\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#single-container-sortables\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Single Container Sortables\"]}),`\n`,(0,n.jsx)(r,{}),`\n`,(0,n.jsx)(e.p,{children:\"To build this we\\u2019ll need both draggable and droppable components. We need an array of IDs of our droppable containers and a piece of state to track which droppable component our draggable component is over. We'll use the onDragEnd function to check if a draggable component is over a particular droppable component. If it is, we'll update the state and add the draggable component as a child of the droppable container in the UI.\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can see how this is done with the interactive demo below:\"}),`\n`,(0,n.jsx)(e.p,{children:\"DnD Kit is an awesome library I recently discovered while working on the new dashboard at Super. It makes the complex task of creating performant Drag-and-Drop UI interactions easier, with some interesting patterns and concepts. I spent some time creating a lot of cool interactions with the library and wanted to share some of the things I learned.\"}),`\n`,(0,n.jsx)(e.p,{children:\"DnD Kit is an awesome library I recently discovered while working on the new dashboard at Super. It makes the complex task of creating performant Drag-and-Drop UI interactions easier, with some interesting patterns and concepts. I spent some time creating a lot of cool interactions with the library and wanted to share some of the things I learned.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"multi-container-sortables\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#multi-container-sortables\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Multi Container Sortables\"]}),`\n`,(0,n.jsx)(r,{}),`\n`,(0,n.jsx)(e.p,{children:\"To build this we\\u2019ll need both draggable and droppable components. We need an array of IDs of our droppable containers and a piece of state to track which droppable component our draggable component is over. We'll use the onDragEnd function to check if a draggable component is over a particular droppable component. If it is, we'll update the state and add the draggable component as a child of the droppable container in the UI.\"}),`\n`,(0,n.jsx)(e.p,{children:\"You can see how this is done with the interactive demo below:\"}),`\n`,(0,n.jsx)(e.p,{children:\"DnD Kit is an awesome library I recently discovered while working on the new dashboard at Super. It makes the complex task of creating performant Drag-and-Drop UI interactions easier, with some interesting patterns and concepts. I spent some time creating a lot of cool interactions with the library and wanted to share some of the things I learned.\"}),`\n`,(0,n.jsx)(e.p,{children:\"DnD Kit is an awesome library I recently discovered while working on the new dashboard at Super. It makes the complex task of creating performant Drag-and-Drop UI interactions easier, with some interesting patterns and concepts. I spent some time creating a lot of cool interactions with the library and wanted to share some of the things I learned.\"})]})}function w(l={}){let{wrapper:e}=l.components||{};return e?(0,n.jsx)(e,Object.assign({},l,{children:(0,n.jsx)(d,l)})):d(l)}var A=w;function F(l,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+l+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return u(C);})();\n;return Component;"
    },
    "_id": "drag-and-drop-in-react-with-dnd-kit.mdx",
    "_raw": {
      "sourceFilePath": "drag-and-drop-in-react-with-dnd-kit.mdx",
      "sourceFileName": "drag-and-drop-in-react-with-dnd-kit.mdx",
      "sourceFileDir": ".",
      "contentType": "mdx",
      "flattenedPath": "drag-and-drop-in-react-with-dnd-kit"
    },
    "type": "Post",
    "publishedAt": "2022-12-27T12:17:17.812Z",
    "lastUpdatedAt": "2022-12-27T12:17:17.812Z",
    "readingTime": {
      "text": "8 min read",
      "minutes": 7.265,
      "time": 435900,
      "words": 1453
    },
    "headings": [
      {
        "id": "core-concepts",
        "content": "Core Concepts",
        "link": "#core-concepts",
        "level": 2
      },
      {
        "id": "draggables",
        "content": "Draggables",
        "link": "#draggables",
        "level": 3
      },
      {
        "id": "droppables",
        "content": "Droppables",
        "link": "#droppables",
        "level": 3
      },
      {
        "id": "examples",
        "content": "Examples",
        "link": "#examples",
        "level": 2
      },
      {
        "id": "free-drag-and-drop",
        "content": "Free Drag-and-Drop",
        "link": "#free-drag-and-drop",
        "level": 3
      },
      {
        "id": "classic-drag-and-drop",
        "content": "Classic Drag-and-Drop",
        "link": "#classic-drag-and-drop",
        "level": 3
      },
      {
        "id": "single-container-sortables",
        "content": "Single Container Sortables",
        "link": "#single-container-sortables",
        "level": 3
      },
      {
        "id": "multi-container-sortables",
        "content": "Multi Container Sortables",
        "link": "#multi-container-sortables",
        "level": 3
      }
    ],
    "slug": "drag-and-drop-in-react-with-dnd-kit"
  },
  {
    "title": "Learn Typescript generics by reimplementing Lodash utilities",
    "description": "Come to grips with Typescript Generics once and for all",
    "tags": [
      "React",
      "Typescript",
      "Tutorial"
    ],
    "ogImage": "/assets/blog/dynamic-routing/cover.jpg",
    "thumbnail": "/assets/blog/dynamic-routing/cover.jpg",
    "postId": "learn-typescript-generics-by-reimplementing-lodash-utilities",
    "body": {
      "raw": "\nDnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\n",
      "code": "var Component=(()=>{var g=Object.create;var r=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var h=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var b=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),y=(e,t)=>{for(var i in t)r(e,i,{get:t[i],enumerable:!0})},s=(e,t,i,o)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let n of m(t))!u.call(e,n)&&n!==i&&r(e,n,{get:()=>t[n],enumerable:!(o=d(t,n))||o.enumerable});return e};var f=(e,t,i)=>(i=e!=null?g(h(e)):{},s(t||!e||!e.__esModule?r(i,\"default\",{value:e,enumerable:!0}):i,e)),x=e=>s(r({},\"__esModule\",{value:!0}),e);var l=b((_,c)=>{c.exports=_jsx_runtime});var v={};y(v,{default:()=>w,frontmatter:()=>D});var a=f(l()),D={title:\"Learn Typescript generics by reimplementing Lodash utilities\",publishedAt:\"2021-12-18\",description:\"Come to grips with Typescript Generics once and for all\",tags:[\"React\",\"Typescript\",\"Tutorial\"],ogImage:\"/assets/blog/dynamic-routing/cover.jpg\",thumbnail:\"/assets/blog/dynamic-routing/cover.jpg\",postId:\"learn-typescript-generics-by-reimplementing-lodash-utilities\"};function p(e){let t=Object.assign({p:\"p\"},e.components);return(0,a.jsx)(t.p,{children:\"DnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\"})}function j(e={}){let{wrapper:t}=e.components||{};return t?(0,a.jsx)(t,Object.assign({},e,{children:(0,a.jsx)(p,e)})):p(e)}var w=j;return x(v);})();\n;return Component;"
    },
    "_id": "learn-typescript-generics-by-reimplementing-lodash-utilities.mdx",
    "_raw": {
      "sourceFilePath": "learn-typescript-generics-by-reimplementing-lodash-utilities.mdx",
      "sourceFileName": "learn-typescript-generics-by-reimplementing-lodash-utilities.mdx",
      "sourceFileDir": ".",
      "contentType": "mdx",
      "flattenedPath": "learn-typescript-generics-by-reimplementing-lodash-utilities"
    },
    "type": "Post",
    "publishedAt": "2022-12-24T08:04:58.152Z",
    "lastUpdatedAt": "2022-12-24T08:04:58.152Z",
    "readingTime": {
      "text": "1 min read",
      "minutes": 0.335,
      "time": 20100,
      "words": 67
    },
    "headings": [],
    "slug": "learn-typescript-generics-by-reimplementing-lodash-utilities"
  },
  {
    "title": "Managing Forms & Inputs in your Next Js Application",
    "description": "How do we tame the beast that is form management in React?",
    "tags": [
      "React",
      "Typescript",
      "Tutorial"
    ],
    "ogImage": "/assets/blog/dynamic-routing/cover.jpg",
    "thumbnail": "/assets/blog/dynamic-routing/cover.jpg",
    "postId": "forms",
    "body": {
      "raw": "\nDnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\n",
      "code": "var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var h=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var b=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of d(e))!u.call(t,a)&&a!==n&&i(t,a,{get:()=>e[a],enumerable:!(r=g(e,a))||r.enumerable});return t};var y=(t,e,n)=>(n=t!=null?p(h(t)):{},s(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),x=t=>s(i({},\"__esModule\",{value:!0}),t);var l=b((_,c)=>{c.exports=_jsx_runtime});var I={};f(I,{default:()=>j,frontmatter:()=>w});var o=y(l()),w={title:\"Managing Forms & Inputs in your Next Js Application\",publishedAt:\"2022-07-16T05:35:07.322Z\",description:\"How do we tame the beast that is form management in React?\",tags:[\"React\",\"Typescript\",\"Tutorial\"],ogImage:\"/assets/blog/dynamic-routing/cover.jpg\",thumbnail:\"/assets/blog/dynamic-routing/cover.jpg\",postId:\"forms\"};function m(t){let e=Object.assign({p:\"p\"},t.components);return(0,o.jsx)(e.p,{children:\"DnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\"})}function D(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(m,t)})):m(t)}var j=D;return x(I);})();\n;return Component;"
    },
    "_id": "managing-forms-and-inputs-in-your-nextjs-app.mdx",
    "_raw": {
      "sourceFilePath": "managing-forms-and-inputs-in-your-nextjs-app.mdx",
      "sourceFileName": "managing-forms-and-inputs-in-your-nextjs-app.mdx",
      "sourceFileDir": ".",
      "contentType": "mdx",
      "flattenedPath": "managing-forms-and-inputs-in-your-nextjs-app"
    },
    "type": "Post",
    "publishedAt": "2022-12-24T08:05:39.322Z",
    "lastUpdatedAt": "2022-12-24T08:05:39.322Z",
    "readingTime": {
      "text": "1 min read",
      "minutes": 0.335,
      "time": 20100,
      "words": 67
    },
    "headings": [],
    "slug": "managing-forms-and-inputs-in-your-nextjs-app"
  },
  {
    "title": "Taming URL paths in Next JS with React Hooks",
    "description": "How do we tame the beast that is form management in React?",
    "tags": [
      "React",
      "Typescript",
      "Tutorial"
    ],
    "ogImage": "/assets/blog/dynamic-routing/cover.jpg",
    "thumbnail": "/assets/blog/dynamic-routing/cover.jpg",
    "postId": "taming-url-paths-in-next-js-with-react-hooks",
    "body": {
      "raw": "\nDnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\n",
      "code": "var Component=(()=>{var m=Object.create;var i=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var d=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var b=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var n in e)i(t,n,{get:e[n],enumerable:!0})},s=(t,e,n,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!u.call(t,a)&&a!==n&&i(t,a,{get:()=>e[a],enumerable:!(r=g(e,a))||r.enumerable});return t};var x=(t,e,n)=>(n=t!=null?m(d(t)):{},s(e||!t||!t.__esModule?i(n,\"default\",{value:t,enumerable:!0}):n,t)),w=t=>s(i({},\"__esModule\",{value:!0}),t);var h=b((_,c)=>{c.exports=_jsx_runtime});var v={};f(v,{default:()=>D,frontmatter:()=>y});var o=x(h()),y={title:\"Taming URL paths in Next JS with React Hooks\",publishedAt:\"2021-10-16T05:35:07.322Z\",description:\"How do we tame the beast that is form management in React?\",tags:[\"React\",\"Typescript\",\"Tutorial\"],ogImage:\"/assets/blog/dynamic-routing/cover.jpg\",thumbnail:\"/assets/blog/dynamic-routing/cover.jpg\",postId:\"taming-url-paths-in-next-js-with-react-hooks\"};function l(t){let e=Object.assign({p:\"p\"},t.components);return(0,o.jsx)(e.p,{children:\"DnD Kit is a lightweight, highly configurable and accessible library that makes creating drag-and-drop interactions with react easy. In this post, I explain the core concepts behind DnD Kit and implement a variety of examples that demonstrate the core features of the library. In the end, we will put everything we have learned together and build a form builder application similar to Google Form using DnD Kit.\"})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,o.jsx)(e,Object.assign({},t,{children:(0,o.jsx)(l,t)})):l(t)}var D=j;return w(v);})();\n;return Component;"
    },
    "_id": "taming-url-paths-in-nextjs-with-react-hooks.mdx",
    "_raw": {
      "sourceFilePath": "taming-url-paths-in-nextjs-with-react-hooks.mdx",
      "sourceFileName": "taming-url-paths-in-nextjs-with-react-hooks.mdx",
      "sourceFileDir": ".",
      "contentType": "mdx",
      "flattenedPath": "taming-url-paths-in-nextjs-with-react-hooks"
    },
    "type": "Post",
    "publishedAt": "2022-12-24T08:06:20.655Z",
    "lastUpdatedAt": "2022-12-24T08:06:20.655Z",
    "readingTime": {
      "text": "1 min read",
      "minutes": 0.335,
      "time": 20100,
      "words": 67
    },
    "headings": [],
    "slug": "taming-url-paths-in-nextjs-with-react-hooks"
  }
]